"use strict";
/*
 * Copyright 2018 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const nem2_sdk_openapi_typescript_node_client_1 = require("nem2-sdk-openapi-typescript-node-client");
// tslint:disable-next-line: ordered-imports
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
/**
 * Http extended by all http services
 */
class Http {
    /**
     * Constructor
     * @param url Base catapult-rest url
     */
    constructor(url) {
        this.url = url;
    }
    createNetworkTypeObservable(networkType) {
        if (networkType && networkType instanceof rxjs_1.Observable) {
            return networkType;
        }
        else if (networkType) {
            return rxjs_1.of(networkType);
        }
        else {
            return rxjs_1.from(new nem2_sdk_openapi_typescript_node_client_1.NodeRoutesApi(this.url).getNodeInfo()).pipe(operators_1.map(({ body }) => body.networkIdentifier), operators_1.catchError((error) => rxjs_1.throwError(this.errorHandling(error)))).pipe(operators_1.shareReplay(1));
        }
    }
    queryParams(queryParams) {
        return {
            pageSize: queryParams ? queryParams.pageSize : undefined,
            id: queryParams ? queryParams.id : undefined,
            ordering: queryParams ? queryParams.order : undefined,
        };
    }
    transactionFilter(filter) {
        return {
            type: filter ? filter.convertCSV(filter.type) : undefined,
        };
    }
    errorHandling(error) {
        if (error.response && error.response.statusCode && error.body) {
            const formattedError = {
                statusCode: error.response.statusCode,
                errorDetails: {
                    statusCode: error.response.statusCode,
                    statusMessage: error.response.statusMessage,
                },
                body: error.body,
            };
            return new Error(JSON.stringify(formattedError));
        }
        if (error.code && error.address && error.code === 'ECONNREFUSED') {
            return new Error(`Cannot reach node: ${error.address}:${error.port}`);
        }
        return new Error(error);
    }
}
exports.Http = Http;
//# sourceMappingURL=Http.js.map