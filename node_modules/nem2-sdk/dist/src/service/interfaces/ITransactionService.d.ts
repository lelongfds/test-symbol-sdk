import { Observable } from 'rxjs';
import { IListener } from '../../infrastructure/IListener';
import { AggregateTransaction } from '../../model/transaction/AggregateTransaction';
import { SignedTransaction } from '../../model/transaction/SignedTransaction';
import { Transaction } from '../../model/transaction/Transaction';
/**
 * Transaction Service Interface
 */
export interface ITransactionService {
    /**
     * @param transactionHashes List of transaction hashes.
     * @returns {Observable<Transaction[]>}
     */
    resolveAliases(transactionHashes: string[]): Observable<Transaction[]>;
    /**
     * @param signedTransaction Signed transaction to be announced.
     * @param listener Websocket listener
     * @returns {Observable<Transaction>}
     */
    announce(signedTransaction: SignedTransaction, listener: IListener): Observable<Transaction>;
    /**
     * Announce aggregate transaction
     * @param signedTransaction Signed aggregate bonded transaction.
     * @param listener Websocket listener
     * @returns {Observable<AggregateTransaction>}
     */
    announceAggregateBonded(signedTransaction: SignedTransaction, listener: IListener): Observable<AggregateTransaction>;
    /**
     * Announce aggregate bonded transaction with lock fund
     * @param signedHashLockTransaction Signed hash lock transaction.
     * @param signedAggregateTransaction Signed aggregate bonded transaction.
     * @param listener Websocket listener
     * @returns {Observable<AggregateTransaction>}
     */
    announceHashLockAggregateBonded(signedHashLockTransaction: SignedTransaction, signedAggregateTransaction: SignedTransaction, listener: IListener): Observable<AggregateTransaction>;
}
