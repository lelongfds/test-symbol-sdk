/// <reference types="node" />
import http = require('http');
import { AccountIds } from '../model/accountIds';
import { MosaicAddressRestrictionDTO } from '../model/mosaicAddressRestrictionDTO';
import { MosaicGlobalRestrictionDTO } from '../model/mosaicGlobalRestrictionDTO';
import { MosaicIds } from '../model/mosaicIds';
import { Authentication } from '../model/models';
export declare enum RestrictionMosaicRoutesApiApiKeys {
}
export declare class RestrictionMosaicRoutesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: RestrictionMosaicRoutesApiApiKeys, value: string): void;
    getMosaicAddressRestriction(mosaicId: string, accountId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MosaicAddressRestrictionDTO;
    }>;
    getMosaicAddressRestrictions(mosaicId: string, accountIds?: AccountIds, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<MosaicAddressRestrictionDTO>;
    }>;
    getMosaicGlobalRestriction(mosaicId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MosaicGlobalRestrictionDTO;
    }>;
    getMosaicGlobalRestrictions(mosaicIds: MosaicIds, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<MosaicGlobalRestrictionDTO>;
    }>;
}
