/// <reference types="node" />
import http = require('http');
import { AccountIds } from '../model/accountIds';
import { AccountsNamesDTO } from '../model/accountsNamesDTO';
import { MosaicIds } from '../model/mosaicIds';
import { MosaicsNamesDTO } from '../model/mosaicsNamesDTO';
import { NamespaceIds } from '../model/namespaceIds';
import { NamespaceInfoDTO } from '../model/namespaceInfoDTO';
import { NamespaceNameDTO } from '../model/namespaceNameDTO';
import { NamespacesInfoDTO } from '../model/namespacesInfoDTO';
import { Authentication } from '../model/models';
export declare enum NamespaceRoutesApiApiKeys {
}
export declare class NamespaceRoutesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: NamespaceRoutesApiApiKeys, value: string): void;
    getAccountsNames(accountIds?: AccountIds, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AccountsNamesDTO;
    }>;
    getMosaicsNames(mosaicIds: MosaicIds, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MosaicsNamesDTO;
    }>;
    getNamespace(namespaceId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: NamespaceInfoDTO;
    }>;
    getNamespacesFromAccount(accountId: string, pageSize?: number, id?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: NamespacesInfoDTO;
    }>;
    getNamespacesFromAccounts(accountIds?: AccountIds, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: NamespacesInfoDTO;
    }>;
    getNamespacesNames(namespaceIds: NamespaceIds, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<NamespaceNameDTO>;
    }>;
}
