/// <reference types="node" />
import http = require('http');
import { AccountIds } from '../model/accountIds';
import { MosaicIds } from '../model/mosaicIds';
import { MosaicInfoDTO } from '../model/mosaicInfoDTO';
import { MosaicsInfoDTO } from '../model/mosaicsInfoDTO';
import { Authentication } from '../model/models';
export declare enum MosaicRoutesApiApiKeys {
}
export declare class MosaicRoutesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: MosaicRoutesApiApiKeys, value: string): void;
    getMosaic(mosaicId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MosaicInfoDTO;
    }>;
    getMosaics(mosaicIds: MosaicIds, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<MosaicInfoDTO>;
    }>;
    getMosaicsFromAccount(accountId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MosaicsInfoDTO;
    }>;
    getMosaicsFromAccounts(accountIds?: AccountIds, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MosaicsInfoDTO;
    }>;
}
