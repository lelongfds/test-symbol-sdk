/// <reference types="node" />
import http = require('http');
import { AnnounceTransactionInfoDTO } from '../model/announceTransactionInfoDTO';
import { Cosignature } from '../model/cosignature';
import { TransactionHashes } from '../model/transactionHashes';
import { TransactionIds } from '../model/transactionIds';
import { TransactionInfoDTO } from '../model/transactionInfoDTO';
import { TransactionPayload } from '../model/transactionPayload';
import { TransactionStatusDTO } from '../model/transactionStatusDTO';
import { Authentication } from '../model/models';
export declare enum TransactionRoutesApiApiKeys {
}
export declare class TransactionRoutesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: TransactionRoutesApiApiKeys, value: string): void;
    announceCosignatureTransaction(cosignature: Cosignature, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AnnounceTransactionInfoDTO;
    }>;
    announcePartialTransaction(transactionPayload: TransactionPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AnnounceTransactionInfoDTO;
    }>;
    announceTransaction(transactionPayload: TransactionPayload, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AnnounceTransactionInfoDTO;
    }>;
    getTransaction(transactionId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TransactionInfoDTO;
    }>;
    getTransactionStatus(hash: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TransactionStatusDTO;
    }>;
    getTransactions(transactionIds: TransactionIds, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TransactionInfoDTO>;
    }>;
    getTransactionsStatuses(transactionHashes: TransactionHashes, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TransactionStatusDTO>;
    }>;
}
