"use strict";
/*
 * Copyright 2018 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const operators_1 = require("rxjs/operators");
const symbol_openapi_typescript_node_client_1 = require("symbol-openapi-typescript-node-client");
const NetworkFees_1 = require("../model/blockchain/NetworkFees");
const NetworkName_1 = require("../model/blockchain/NetworkName");
const Http_1 = require("./Http");
const NodeHttp_1 = require("./NodeHttp");
/**
 * Network http repository.
 *
 * @since 1.0
 */
class NetworkHttp extends Http_1.Http {
    /**
     * Constructor
     * @param url
     */
    constructor(url) {
        super(url);
        this.nodeHttp = new NodeHttp_1.NodeHttp(url);
        this.networkRoutesApi = new symbol_openapi_typescript_node_client_1.NetworkRoutesApi(url);
    }
    /**
     * Get current network identifier.
     *
     * @return network identifier.
     */
    getNetworkType() {
        return this.nodeHttp.getNodeInfo().pipe(operators_1.map((nodeInfo) => nodeInfo.networkIdentifier));
    }
    /**
     * Get current network type name and description
     *
     * @return current network type name and description
     */
    getNetworkName() {
        return this.call(this.networkRoutesApi.getNetworkType(), (body) => new NetworkName_1.NetworkName(body.name, body.description));
    }
    /**
     * Returns information about the average, median, highest and lower fee multiplier over the last
     * \"numBlocksTransactionFeeStats\". The setting \"numBlocksTransactionFeeStats\" is adjustable
     * via a configuration file (rest/resources/rest.json) per REST instance.
     * @summary Get transaction fees information
     */
    getNetworkFees() {
        return this.call(this.networkRoutesApi.getNetworkFees(), (body) => new NetworkFees_1.NetworkFees(body.averageFeeMultiplier, body.medianFeeMultiplier, body.highestFeeMultiplier, body.lowestFeeMultiplier));
    }
}
exports.NetworkHttp = NetworkHttp;
//# sourceMappingURL=NetworkHttp.js.map